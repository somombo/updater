#!/bin/sh
CONDA_ROOT="/c/tools/miniconda3" #TODO: Somo> Find a way to not depend on hard coded $CONDA_ROOT path
CURRENT_DIR="$(dirname "$0")"
LOG_FILE="$TEMP/somombo/updater/status.log"; mkdir -p "$(dirname $LOG_FILE)";
VERSION=$(cat "$CURRENT_DIR/VERSION")

source "$CURRENT_DIR/params.sh"

err_code=1

echo
echo ">>> 1. Updating Nodejs and NPM <<<"
echo

choco upgrade nodejs-lts --yes
if [ $? -ne 0 ]; then err_code=$(($err_code * 2)); fi

echo 
# xargs trims off leading and trailing whitespace
CURRENTNPM=$(npm --version | xargs)
echo "Current NPM version: $CURRENTNPM"
NEXTNPM=$(npm view npm@latest version | xargs)
echo "Next NPM version: $NEXTNPM"

if [ $CURRENTNPM != $NEXTNPM ]; then 

# choco config set --name="'commandExecutionTimeoutSeconds'" --value="'14400'"
# choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --passive --locale en-US --norestart"

# npm install --global --force --production npm-windows-upgrade
# npm install --global --force chai @angular/cli express-gateway firebase-tools http-server mocha nodemon ts-node tslab typescript

## check 'C:\Users\makombo\AppData\Roaming\npm\node_modules'


	### The following must only be run under the assumption that 
	### visualstudio20XXbuildtools is already choco installed 
	### and python (v3 preferred) is available on path 
	# npm-windows-upgrade --npm-version latest
	npm-windows-upgrade --no-spinner --npm-path "C:\Program Files\nodejs" --npm-version="$NEXTNPM"
	
	
	if [ $? -ne 0 ]; then err_code=$(($err_code * 3)); fi

else

	echo "Skipping NPM upgrade (already at latest version)."
fi
echo
echo 

npm outdated -g --depth 0
echo
echo
npm update --global
if [ $? -ne 0 ]; then err_code=$(($err_code * 5)); fi


echo
echo ">>> 2. Updating Conda <<<"
echo

choco upgrade miniconda3 --yes
if [ $? -ne 0 ]; then err_code=$(($err_code * 7)); fi


source "$CONDA_ROOT/Scripts/activate"
if [ $? -ne 0 ]; then err_code=$(($err_code * 11)); fi
	
	conda update --name=root conda --yes
	if [ $? -ne 0 ]; then err_code=$(($err_code * 13)); fi

	conda update --all --yes
	if [ $? -ne 0 ]; then err_code=$(($err_code * 17)); fi

	conda install console_shortcut powershell_shortcut --yes
	if [ $? -ne 0 ]; then err_code=$(($err_code * 19)); fi

conda deactivate
if [ $? -ne 0 ]; then err_code=$(($err_code * 23)); fi

echo	
echo ">>> 3. Updating the rest of the Choco packages <<<"
echo

choco upgrade all --yes
if [ $? -ne 0 ]; then err_code=$(($err_code * 29)); fi

echo	
echo ">>> 4. Updating wsl and apt packages <<<"
echo

wsl --update
if [ $? -ne 0 ]; then err_code=$(($err_code * 31)); fi

wsl --shutdown  # since change will take effect on the next full restart of WSL

wsl --user root --exec sh -c "rm -rf /var/lib/apt/lists/* && apt-get update -y && apt-get upgrade -y"
if [ $? -ne 0 ]; then err_code=$(($err_code * 37)); fi

echo	
echo ">>> 5. Updating Rust Toolchain <<<"
echo

rustup update stable
if [ $? -ne 0 ]; then err_code=$(($err_code * 41)); fi


echo	
echo ">>> 6. Upgrading Deno <<<"
echo

deno upgrade
if [ $? -ne 0 ]; then err_code=$(($err_code * 43)); fi

echo	
echo ">>> 7. Updating Git for Windows <<<"
echo

git update-git-for-windows --yes
if [ $? -ne 0 ]; then err_code=$(($err_code * 47)); fi

######################### Results ########################

if [ $err_code -ne 1 ]; then
    echo "$(date) |> FAILED with Error Code: $err_code" >> $LOG_FILE
else
    echo "$(date) |> SUCCESS" >> $LOG_FILE
fi


"$CURRENT_DIR/upd" --log | grep -e "\S"
echo

if [ $err_code -ne 1 ]; then
    exit $err_code
else
		exit 0
fi